--- misc/core/build.properties	2007-10-18 08:20:01.000000000 +0200
+++ misc/build/core/build.properties	2008-09-08 11:51:22.178125000 +0200
@@ -17,8 +17,8 @@
 
 #
 # Make sure that JDK 1.2 compatible class files are generated
-build.target=1.2
-build.source=1.2
+build.target=1.3
+build.source=1.3
 build.retro.jdk=/opt/jdk1.2.2
 
 #
@@ -40,15 +40,15 @@
 
 # Used by: core libraries
 jcommon-jar-file=jcommon-1.0.10.jar
-jcommon-serializer-jar-file=jcommon-serializer-0.1.0.jar
-libfonts-jar-file=libfonts-0.3.2.jar
+jcommon-serializer-jar-file=jcommon-serializer-0.2.0.jar
+libfonts-jar-file=libfonts-0.3.3.jar
 libfonts-core-jar-file=libfonts-0.3.2.jar
 libfonts-itext-jar-file=libfonts-0.3.2.jar
 liblayout-jar-file=liblayout-0.2.8.jar
-libloader-jar-file=libloader-0.3.5.jar
-libxml-jar-file=libxml-0.9.8.jar
-libformula-jar-file=libformula-0.1.13.jar
-librepository-jar-file=librepository-0.1.3.jar
+libloader-jar-file=libloader-0.3.6.jar
+libxml-jar-file=libxml-0.9.9.jar
+libformula-jar-file=libformula-0.1.14.jar
+librepository-jar-file=librepository-0.1.4.jar
 flute-jar-file=flute-1.3-jfree-20061107.jar
 
 #
--- misc/core/build.xml	2007-10-18 08:20:01.000000000 +0200
+++ misc/build/core/build.xml	2008-09-08 11:51:22.162500000 +0200
@@ -54,13 +54,11 @@
     <isClassAvailableEx class-name="org.jfree.xmlns.LibXmlInfo"
                       property-name="lib.xmlns.present">
       <test-classpath>
-        <pathelement location="${libdir}/${jaxp-jar-file}"/>
         <pathelement location="${libdir}/${libxml-jar-file}"/>
         <pathelement location="${libdir}/${jcommon-jar-file}"/>
         <pathelement location="${libdir}/${libloader-jar-file}"/>
       </test-classpath>
       <additional-tests>
-        <available file="${libdir}/${jaxp-jar-file}"/>
         <available file="${libdir}/${libxml-jar-file}"/>
         <available file="${libdir}/${jcommon-jar-file}"/>
       </additional-tests>
@@ -136,6 +134,7 @@
                source-dir="source">
       <all-sources>
         <exclude name="org/jfree/report/modules/gui/pdf/**" unless="lib.itext.present"/>
+              <exclude name="org/jfree/report/modules/gui/swing/pdf/**" unless="lib.itext.present"/>
       </all-sources>
       <all-classpath>
         <pathelement location="${libdir}/${jcommon-jar-file}"/>
@@ -168,6 +167,7 @@
         <include name="*.jpg"/>
         <include name="**/*.jpg"/>
         <exclude name="org/jfree/report/modules/gui/pdf/**" unless="lib.itext.present"/>
+              <exclude name="org/jfree/report/modules/gui/swing/pdf/**" unless="lib.itext.present"/>
       </all-resources>
     </build-all>
   </target>
@@ -179,6 +179,7 @@
                  jdk-dir="${build.retro.jdk}">
       <all-sources>
         <exclude name="org/jfree/report/modules/gui/pdf/**" unless="lib.itext.present"/>
+              <exclude name="org/jfree/report/modules/gui/swing/pdf/**" unless="lib.itext.present"/>
       </all-sources>
       <all-classpath>
         <pathelement location="${libdir}/${jcommon-jar-file}"/>
@@ -211,6 +212,7 @@
         <include name="*.jpg"/>
         <include name="**/*.jpg"/>
         <exclude name="org/jfree/report/modules/gui/pdf/**" unless="lib.itext.present"/>
+              <exclude name="org/jfree/report/modules/gui/swing/pdf/**" unless="lib.itext.present"/>
       </all-resources>
     </build-retro>
   </target>
--- misc/core/source/org/jfree/report/expressions/ReportFormulaContext.java	2007-10-18 08:19:32.000000000 +0200
+++ misc/build/core/source/org/jfree/report/expressions/ReportFormulaContext.java	2008-10-01 09:38:50.951250000 +0200
@@ -28,7 +28,6 @@
  * (C) Copyright 2000-2005, by Object Refinery Limited.
  * (C) Copyright 2005-2007, by Pentaho Corporation.
  */
-
 package org.jfree.report.expressions;
 
 import org.jfree.formula.ContextEvaluationException;
@@ -40,6 +39,9 @@
 import org.jfree.formula.typing.Type;
 import org.jfree.formula.typing.TypeRegistry;
 import org.jfree.formula.typing.coretypes.AnyType;
+import org.jfree.formula.typing.coretypes.DateTimeType;
+import org.jfree.formula.typing.coretypes.NumberType;
+import org.jfree.formula.typing.coretypes.TextType;
 import org.jfree.report.DataFlags;
 import org.jfree.report.DataRow;
 import org.jfree.report.DataSourceException;
@@ -53,101 +55,111 @@
  */
 public class ReportFormulaContext implements FormulaContext
 {
-  private FormulaContext backend;
-  private DataRow dataRow;
-  private Object declaringElement;
-
-  public ReportFormulaContext(final FormulaContext backend,
-                              final DataRow dataRow)
-  {
-    this.backend = backend;
-    this.dataRow = dataRow;
-  }
-
-  public LocalizationContext getLocalizationContext()
-  {
-    return backend.getLocalizationContext();
-  }
-
-  public Configuration getConfiguration()
-  {
-    return backend.getConfiguration();
-  }
-
-  public FunctionRegistry getFunctionRegistry()
-  {
-    return backend.getFunctionRegistry();
-  }
-
-  public TypeRegistry getTypeRegistry()
-  {
-    return backend.getTypeRegistry();
-  }
-
-  public OperatorFactory getOperatorFactory()
-  {
-    return backend.getOperatorFactory();
-  }
-
-  public boolean isReferenceDirty(final Object name) throws ContextEvaluationException
-  {
-    try
-    {
-      final DataFlags flags = dataRow.getFlags(String.valueOf(name));
-      if (flags == null)
-      {
-        throw new ContextEvaluationException
-            (new LibFormulaErrorValue(LibFormulaErrorValue.ERROR_REFERENCE_NOT_RESOLVABLE));
-      }
-      return flags.isChanged();
-    }
-    catch(Exception e)
-    {
-      throw new ContextEvaluationException
-          (new LibFormulaErrorValue(LibFormulaErrorValue.ERROR_REFERENCE_NOT_RESOLVABLE));
-    }
-  }
-
-  public Type resolveReferenceType(final Object name)
-  {
-    return AnyType.TYPE;
-  }
-
-  public Object resolveReference(final Object name) throws ContextEvaluationException
-  {
-    if (name == null)
-    {
-      throw new NullPointerException();
-    }
-    try
-    {
-      return dataRow.get(String.valueOf(name));
-    }
-    catch (DataSourceException e)
-    {
-      Log.debug ("Error while resolving formula reference: ", e);
-      throw new ContextEvaluationException(new LibFormulaErrorValue
-          (LibFormulaErrorValue.ERROR_REFERENCE_NOT_RESOLVABLE));
-    }
-  }
-
-  public DataRow getDataRow()
-  {
-    return dataRow;
-  }
-
-  public void setDataRow(final DataRow dataRow)
-  {
-    this.dataRow = dataRow;
-  }
-
-  public Object getDeclaringElement()
-  {
-    return declaringElement;
-  }
-
-  public void setDeclaringElement(final Object declaringElement)
-  {
-    this.declaringElement = declaringElement;
-  }
+
+    private FormulaContext backend;
+    private DataRow dataRow;
+    private Object declaringElement;
+
+    public ReportFormulaContext(final FormulaContext backend,
+            final DataRow dataRow)
+    {
+        this.backend = backend;
+        this.dataRow = dataRow;
+    }
+
+    public LocalizationContext getLocalizationContext()
+    {
+        return backend.getLocalizationContext();
+    }
+
+    public Configuration getConfiguration()
+    {
+        return backend.getConfiguration();
+    }
+
+    public FunctionRegistry getFunctionRegistry()
+    {
+        return backend.getFunctionRegistry();
+    }
+
+    public TypeRegistry getTypeRegistry()
+    {
+        return backend.getTypeRegistry();
+    }
+
+    public OperatorFactory getOperatorFactory()
+    {
+        return backend.getOperatorFactory();
+    }
+
+    public boolean isReferenceDirty(final Object name) throws ContextEvaluationException
+    {
+        try
+        {
+            final DataFlags flags = dataRow.getFlags(String.valueOf(name));
+            if ( flags == null )
+            {
+                throw new ContextEvaluationException(new LibFormulaErrorValue(LibFormulaErrorValue.ERROR_REFERENCE_NOT_RESOLVABLE));
+            }
+            return flags.isChanged();
+        } catch ( Exception e )
+        {
+            throw new ContextEvaluationException(new LibFormulaErrorValue(LibFormulaErrorValue.ERROR_REFERENCE_NOT_RESOLVABLE));
+        }
+    }
+
+    public Type resolveReferenceType(final Object name)
+    {
+        try
+        {
+            final DataFlags flags = dataRow.getFlags(String.valueOf(name));
+            if ( flags != null)
+            {
+                if ( flags.isDate() )
+                    return DateTimeType.DATE_TYPE;
+                if ( flags.isNumeric() )
+                    return NumberType.GENERIC_NUMBER;
+                return TextType.TYPE;
+            }
+        } catch ( DataSourceException ex )
+        {
+        }
+        return AnyType.TYPE;
+    }
+
+    public Object resolveReference(final Object name) throws ContextEvaluationException
+    {
+        if ( name == null )
+        {
+            throw new NullPointerException();
+        }
+        try
+        {
+            return dataRow.get(String.valueOf(name));
+        } catch ( DataSourceException e )
+        {
+            Log.debug("Error while resolving formula reference: ", e);
+            throw new ContextEvaluationException(new LibFormulaErrorValue(LibFormulaErrorValue.ERROR_REFERENCE_NOT_RESOLVABLE));
+        }
+    }
+
+    public DataRow getDataRow()
+    {
+        return dataRow;
+    }
+
+    public void setDataRow(final DataRow dataRow)
+    {
+        this.dataRow = dataRow;
+    }
+
+    public Object getDeclaringElement()
+    {
+        return declaringElement;
+    }
+
+    public void setDeclaringElement(final Object declaringElement)
+    {
+        this.declaringElement = declaringElement;
+    }
 }
